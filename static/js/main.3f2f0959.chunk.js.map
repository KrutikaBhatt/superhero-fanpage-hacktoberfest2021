{"version":3,"sources":["assets/logo2.png","assets/Spinner.gif","assets/iron-man.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","isLoading","setLoading","useEffect","fetch","then","response","json","result","console","log","catch","err","className","src","logo","spinner","map","hero","image","author","title","description","power","powers","style","color","text_color","backgroundColor","widget_color","dialogue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,G,MAAA,IAA0B,mCCA1B,GCAA,IDAA,IAA0B,qC,OEsE1BA,MA/Df,WAEE,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KAeA,OAbAC,qBAAU,WAERC,MADU,6CACCC,MAAK,SAACC,GACbA,EAASC,OAAOF,MAAK,SAACG,GAClBC,QAAQC,IAAIF,GACZR,EAAQQ,GACRN,GAAW,SAEhBS,OAAM,SAAAC,GACLH,QAAQC,IAAIE,QAEhB,IAGA,mCAEAX,EAEE,sBAAKY,UAAU,aAAf,UACE,qBAAKC,IAAKC,EAAMF,UAAU,SAC1B,qBAAKC,IAAKE,EAASH,UAAU,eAG7B,sBAAKA,UAAU,aAAf,UACE,qBAAKC,IAAKC,EAAMF,UAAU,SACzBd,EAAKkB,KAAI,SAACC,GAAD,OACR,sBAAKL,UAAU,sBAAf,UACA,qBAAKA,UAAU,QAAf,SACE,qBAAKC,IAAKI,EAAKC,MAAON,UAAU,sBAElC,sBAAKA,UAAU,gBAAf,UACA,sBAAKA,UAAU,cAAf,eACKK,EAAKE,UAER,qBAAKP,UAAU,aAAf,SAA6BK,EAAKG,QAClC,qBAAKR,UAAU,cAAf,SAA8BK,EAAKI,cACnC,qBAAKT,UAAU,gBAAf,SACGK,EAAKK,MAAMN,KAAI,SAACO,GAAD,OACd,qBAAKX,UAAU,QAAQY,MAAO,CAACC,MAAMR,EAAKS,WAAWC,gBAAgBV,EAAKW,cAA1E,SACGL,SAKP,8BACE,oBAAGX,UAAU,kBAAb,eAAkCK,EAAKY,SAAvC,yBC7CDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3f2f0959.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo2.2f50aafd.png\";","export default __webpack_public_path__ + \"static/media/Spinner.5469aaf1.gif\";","export default __webpack_public_path__ + \"static/media/iron-man.e4eba382.jpg\";","import './App.css';\nimport logo from './assets/logo2.png';\nimport iron_man from './assets/iron-man.jpg';\nimport { useEffect,useState } from 'react';\nimport {Table,Spinner} from 'react-bootstrap';\nimport spinner from './assets/Spinner.gif';\n\nfunction App() {\n\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(()=>{\n    let url = \"https://superherobackend12.herokuapp.com/\";\n    fetch(url).then((response)=>{\n        response.json().then((result)=>{\n            console.log(result);\n            setData(result);\n            setLoading(false);\n        })\n    }).catch(err=>{\n        console.log(err);\n    })\n  },[]);\n\n  return (\n    <>\n    {\n    isLoading?\n    (\n      <div className=\"background\">\n        <img src={logo} className=\"logo\"></img>\n        <img src={spinner} className=\"spinner\"></img>\n      </div>\n      ):(\n        <div className=\"background\">\n          <img src={logo} className=\"logo\"></img>\n          {data.map((hero) =>(\n            <div className=\"superhero_container\">\n            <div className=\"photo\">\n              <img src={hero.image} className=\"superhero_photo\"></img>\n            </div>\n            <div className=\"info_division\">\n            <div className=\"Author_name\"> - \n                {hero.author}\n              </div>\n              <div className=\"title_name\">{hero.title}</div>\n              <div className=\"description\">{hero.description}</div>\n              <div className=\"powers_arrays\">\n                {hero.power.map((powers) =>(\n                  <div className=\"power\" style={{color:hero.text_color,backgroundColor:hero.widget_color}}>\n                    {powers}\n                  </div>\n                ))}\n              </div>\n\n              <div>\n                <p className=\"quotes_complete\">\" {hero.dialogue} \"</p>\n              </div>\n            </div>\n          </div>\n          ))}\n          \n        </div>\n      )\n    }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}